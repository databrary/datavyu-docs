====================
Spreadsheet Overview
====================


The Datavyu Spreadsheet is where coders record :term:`observations
<observation>`. The spreadsheet is the core of Datavyu. By
:ref:`configuring columns <configure-columns>`, coders can record
observations and link them directly to timestamps in the data source.

For a brief introduction to some of the spreadsheet's components and
capabilities, watch the spreadsheet walkthrough video:

.. raw:: html

   <video controls width="100%" height="auto">
   <source src="../_static/video/edit-spreadsheet.mp4" type="video/mp4">
   <source src="../_static/video/edit-spreadsheet.webm" type="video/webm">
   </video>

Each user-defined column has its own column in the spreadsheet.
:term:`Cells <cell>` are column entries, boxes in the column, where
coders record their observation data as :term:`codes <code>`. Cells
follow each other in sequence: looking vertically down a column shows
the sequence of observations for that column. If you have enabled
:ref:`temporal-ordering`, Datavyu displays cells based on their
:term:`onset` and :term:`offset` times, to show what occurred at that
point in time in the data source.

.. figure:: /img/spreadsheet-annotated.png
   :alt: Image of a Datavyu spreadsheet with 6 columns, and annotations labeling a column, cell, and codes within a cell
   :align: center
   
   A typical Datavyu spreadsheet with six columns. Note the
   :guilabel:`plus` icon in the top right, which you use to add new
   :term:`columns <column>`.

Datavyu automatically links the times coded in the spreadsheet to the
current time in the data source. This allows coders to record
the :term:`onset` and :term:`offset` times of events into
the spreadsheet. Coders can also jump to the relevant time in the data source by
selecting a cell in the spreadsheet.

.. _columns:
.. _column-types:
.. _variable-types:

Columns
-------

Datavyu uses columns to group together related observations. In
general, coders will code the data source column-by-column 
Each column that a user adds occupies its own column in the
spreadsheet.

Using the :ref:`Code Editor <vocab-editor>`, you can configure
columns to represent any number of observations.

.. TODO: image with new columns showing multiple codes per cell

Columns have :term:`codes <code>`, which represent the
feature that you are studying. For instance, a code could be "Left
hand touch", or "Hesitation", or "Focus". When a coder codes the data
source, he or she might record the presence or absence of these
codes. A column must have *at least* one code, but may
have as many as desired. See: the :doc:`column configuration
</guide/tutorials/configure-datavyu-codes>` tutorial provides
instructions for configuring matrix columns.

.. _hide-show-columns:

Hide and Show Columns
~~~~~~~~~~~~~~~~~~~~~

To hide a column, select the column by clicking on its name. The
selected column will have a blue background. You can select multiple
columns by ``Cmd`` -clicking (on Mac) or ``Ctrl`` -clicking (on
Windows). Then, in the :guilabel:`Spreadsheet` menu, select
:guilabel:`Hide Selected Columns`.

You can also control each column's visibility from the
:guilabel:`Column List`, which you access from the
:guilabel:`Spreadsheet` menu. The :guilabel:`Column List` lists all
the columns in a spreadsheet, and includes a check box which you can
use to toggle its visiblity.

If you wish to show all columns you can do so with the :guilabel:`Show
All Columns` menu option from the :guilabel:`Spreadsheet` menu.

.. _rearrange-columns:

Rearrange Columns
~~~~~~~~~~~~~~~~~

To rearrange columns within the Spreadsheet, simply click the column's
name and drag it to the desired location.

.. _cells:
.. _cell-explanation:

Cells
-----

Cells are at the core of Datavyu: each cell represents an observation
recorded by the coder. 

Datavyu requires that each cell have three codes, in addition to any
user-specified codes:

- :term:`onset`: the onset is the time in the video that the
  observation begins. Since cells represent observations during a
  period of time, they must have a starting point.

- :term:`offset`: the offset is the time in the video that the
  observation ends. Since cells represnt observations during a period
  of time, they must have an end point.

- :term:`ordinal`: the cell ordinal indicates the position of the cell
  within the column. The first cell (the one with the earliest onset)
  would be number 1, the second number 2, and so on. Ordinals are
  automatically coded and updated as you code your data source: you
  will never need to set the ordinal. Cell ordinals are useful for
  scripting and analysis.

The following image labels each component within a Datavyu cell.

.. image:: /img/cell-zoomin.png
   :align: center
   :alt: Zoomed-in view of a Datavyu cell, labeling its codes, onset, offset, and ordinal.

Spreadsheet Customization
-------------------------

Datavyu allows you to modify the spreadsheet to better suit your needs
by including options that you can activate or deactivate, depending on
your interests.

Zoom
~~~~

By default, the Datavyu spreadsheet uses one font size for the
user-input codes in cells. You can increase this font size by choosing
:guilabel:`Zoom` from the :guilabel:`Spreadsheet` menu.

You can also modify zoom using keyboard shortcuts:

- ``cmd +`` / ``alt +`` zooms in
- ``cmd -`` / ``alt -`` zooms out
- ``cmd 0`` / ``alt 0`` resets the zoom to the default level

.. _temporal-ordering:
.. _temporal-alignment:

Temporal Alignment
~~~~~~~~~~~~~~~~~~

Temporal alignment is an important concept in Datavyu. When temporal
alignment is active, Datavyu groups cells based on their onsets and
offsets, visually representing the period of time each cell occupies.
This Temporal Alignment video
highlights the differences active and inactive temporal alignment:

.. raw:: html

   <video controls width="100%" height="auto">
   <source src="../_static/video/temporal-alignment.mp4" type="video/mp4">
   <source src="../_static/video/temporal-alignment.webm" type="video/webm">
   </video>

Temporal alignment allows you to visualize what occurred at what time,
and to compare event sequence between columns. When coding, you should
ensure that temporal alignment is active.

.. figure:: /img/temporal-alignment-comparison.png
   :alt: comparison of two identical spreadsheets, one of which has temporal alignment active, and the other with temporal alignment disabled
   :align: center

   At left: a spreadsheet with temporal alignment enabled; at right:
   the same spreadsheet with temporal alignment disabled. Note that the
   cells contain the same information, it is just their presentation
   that changes. Note also that enabling temporal alignment makes it
   easier to understand the sequence of events between different columns.

Toggle Temporal Alignment
`````````````````````````

You can toggle temporal alignment using the ``cmd T`` / ``alt T``
keyboard shortcut, or by selecting :guilabel:`Weak Temporal Alignment`
from the :guilabel:`Spreadsheet` menu.
