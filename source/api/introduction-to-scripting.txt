=========================
Introduction to Scripting
=========================

This detailed guide describes how to write Ruby scripts to automate
tasks in Datavyu, and to ensure reliable :term:`coding <code>`,

:doc:`/api/overview` provides an overview of the :term:`methods
<method>` and :term:`classes <class>` of the Datavyu API. For a more
in-depth discussion of each particular method and function, refer to the
:doc:`Reference </api/reference>` documentation.

Recommended Text Editors
------------------------

Ruby scripts are simply text files with a ``.rb`` file extension. You
can write scripts in any text editor, including built-in ones like Notepad or TextEdit.
However, while those programs are adequate for scripting purposes, modern
text editors make scripts much easier to read by providing syntax
highlighting, which can make a world of difference when attempting to
debug an issue.

.. figure:: /img/syntax-highlighting-comparison.png
   :alt: comparison of Ruby scripts viewed in TextEdit (Mac OS X) and TextMate 2
   :align: center
   :width: 1100px
   
   At left: TextEdit (Mac OS X). At right: TextMate 2 (Mac OS X) with "Mac
   Classic" theme. Note that the same "add-cells-to-variable.rb" is open in
   each editor.

To take advantage of syntax highlighting and coding support, we
recommend installing and using one of the following programs for editing
Ruby scripts:

- Windows:

  - `Notepad++ <http://notepad-plus-plus.org/>`__ (free and open-source)
  - `Notepad2 <http://www.flos-freeware.ch/notepad2.html>`__ (free and open-source)

- Mac OSX:

  - `TextMate 2 <https://api.textmate.org/downloads/beta>`__ (free and open-source)
  - `gedit <http://projects.gnome.org/gedit/>`__ (free and open-source)
  - `TextWrangler <http://www.barebones.com/products/TextWrangler/>`__ (free)

- Linux:

  - `gedit <http://projects.gnome.org/gedit/>`__ (free and open-source)
  - `kate <http://kate-editor.org/>`__ (free and open-source)

.. tip:: 
   
   Syntax highlighting generally depends on file extensions. The file
   extension tells the text editor what kind of file it is. If the Ruby
   script file does not have the ``.rb`` extension, you might not get
   proper syntax highlighting, so ensure that your Ruby script files end
   in ``.rb``.

------------------

Each cell that you create with the Datavyu API has three required
fields: ``onset``, ``offset``, and ``ordinal``. Each cell also takes at
least one :term:`argument`.

``onset``, ``offset``, and ``ordinal`` are all :term:`Integers
<integer>`, while :term:`[codes]` are :term:`Strings <string>`.

``onset`` and ``offset`` are measured in **milliseconds from
the beginning of the video (or other data stream)**, starting from 0.
For instance, an ``onset`` time of 00:02:20 translates to 140000ms.

Since [codes] are strings, you must convert any [codes] that you wish to
perform calculations on to integers. This is easily done with Ruby using
the `to_i <http://ruby-doc.org/core-2.0.0/String.html#method-i-to_i>`_
method.

.. example:: 

   Create a variable, ``var1`` whose value is "5". Since the number 5 has
   quotation marks around it, it is a string.

   .. code-block:: ruby

      var1 = "5"
  
   If you print ``var``, you'd see that it is "5". Now,create a new
   variable, ``var2`` from ``var1`` using ``to_i`` to convert the "5" to
   a ``5``.
  
   .. code-block:: ruby

      var2 = var1.to_i

   Print ``var2`` and see that it is a ``5`` without quotation marks:
   
   .. code-block:: ruby
   
      print var2
  
.. tip::

   Ruby provides two options for printing to the console: the ``p``
   command and the ``puts`` command. When in doubt, use ``p``, as it
   prints arrays and lists in a more readable format, rather than
   mashing them all together like ``puts`` does. Try printing a list
   such as ``[5, 6, 7, 8, 9]`` using both ``p`` and ``puts`` to
   see the difference.
   
   .. code-block:: ruby

      p [5,6,7,8,9] 
      puts [5,6,7,8,9]


Basic Script Format
-------------------

In order to work, all Datavyu API scripts must include the following
line at the top:

.. code-block:: ruby

   require 'Datavyu_API.rb'

This ``require`` statement loads all of the helper functions that enable
your scripts to interact with the Datavyu database.

In general, the rest of the script code goes between ``begin`` and
``end`` tags, making the general format as follows:

.. code-block:: ruby

   require 'Datavyu_API.rb'
   begin
     # Get the variables that we want to work with

     # Do something to those variables

     # Write any changes to those variables back to the database
   end

.. tip::

   Anything that comes after a ``#`` character on a line in Ruby is a
   "comment", which means it will not execute. Comments are useful for
   explaining what the code is doing so that you remember when you look
   at the script 6 months from now. The examples in this documentation
   use comments extensively.

Now that you are well grounded in the Datavyu Ruby API mechanics,
consider the :doc:`/api/tutorials` or :doc:`/api/reference`.
