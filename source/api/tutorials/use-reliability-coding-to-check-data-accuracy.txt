======================================================
Check Inter-rater Reliability to Improve Data Accuracy
======================================================

.. default-domain:: rb

.. begin-content

Reliability coding verifies that the desired codes are observable and
that the coders are accurately interpreting events. With reliability coding,
two coders separately code the same data source. You can create a :term:`reliability
column`, which the second coder can use to reccord his or her observations. After both coders have
coded the same column, they can compare their codes and determine their inter-rater
reliability.


.. note::

   While it may be tempting to have the reliability coder code the
   data source in a new spreadsheet, you should endeavor to keep all
   codes for a given data source in a single spreadsheet. This
   facilitates analysis and ensures that like data are kept
   together. To prevent the reliability coder from seeing the original
   coding pass, you can :ref:`hide the original coded column
   <hide-show-columns>`.

   .. Link to best practices organization section when it exists.

Make a Reliability Column
~~~~~~~~~~~~~~~~~~~~~~~~~

In general, when creating reliability columns you create
blank cells that correspond to the cells created during the first coding
pass. This ensures that the two coders will have observed the same
events in the data stream and allows easy comparison of the two coding
passes.

The Datavyu Ruby API provides the :meth:`makeReliability` method
for creating reliability variables. :meth:`makeReliability` has four
parameters:

.. include:: /api/reference/1.3.4/makeReliability.txt
   :start-after: table-start
   :end-before: table-end

.. tip::

   Copying the :term:`onset` of the
   original column to the new reliability column in the ``args_to_keep``
   parameter makes it easier for the second coder to navigate to
   the correct locations in the data source, and to code the same
   events as the original coder.

   When making a reliability column, you should also think about how you
   are going to compare the columns. :meth:`checkReliability`, which
   you use to check reliability. It requires that each pair of cells have a
   unique identifier that link them together. For example,
   a trial number coded into each cell would match corresponding cells,
   even if only a subset of cells were included in the reliability
   variable.

The following example uses the :download:`sample data
</resources/Example-Template.opf>` to create a new
reliability column called "rel.trial" from its "trial" column, skipping
every other cell, and copying over the *onset* and *trialnum* codes
so that the reliability coder doesn't' have to recode :term:`onset` and
trial numbers.

.. code-block:: ruby

   require 'Datavyu_API.rb'
   begin
      makeReliability("rel.trial", "trial", 2, "onset", "trialnum")
   end

.. .. figure:: /img/makeReliability-definition-vs-use.png

.. .. [Caption describing mapping of function definition to its use]

.. note::

   You do **not** have to write the variable back to the spreadsheet.
   :meth:`makeReliability` automatically writes its results to
   the spreadsheet.

Check Reliability
~~~~~~~~~~~~~~~~~

Once the second coder has recorded their observations in the reliability
column, you can use :meth:`checkReliability` to compare the primary
and reliability columns cells. :meth:`checkReliability`
returns the number of errors, and the percent agreement.

:meth:`checkReliability()` has four required parameters, and one
optional one:

.. include:: /api/reference/1.3.4/checkReliability.txt
   :start-after: table-start
   :end-before: table-end

.. note::

   ``match_arg`` is particularly important: for
   :meth:`checkReliability` to know which cells to compare, it needs
   to have some parameter that is unique to each pair of corresponding
   primary and reliability cells. In many cases, the onset time of the cell can
   be used to match primary and reliability cases.


#. Create an object that holds the path that it should output to using
   Ruby's `File.expand_path
   <http://www.ruby-doc.org/core-1.9.3/File.html#method-c-expand_path>`_
   method, which converts a relative path,
   like ``~/Desktop/file.txt`` to an absolute path name, which contains
   the root directory, and all sub-directories, like
   ``/Users/alice/Desktop/file.txt``

   The following commands create a variable called ``dump_file`` that
   holds the absolute path to a file on the Desktop called
   ``relcheck.txt``.

   .. code-block:: ruby

      require 'Datavyu_API.rb'
      begin

         dump_file = File.expand_path("~/Desktop/relCheck.txt")

#. Compare "trial" and "rel.trial" using :meth:`checkReliability`,
   with a 5ms time tolerance, and output the results to the
   ``dump_file``:

   .. code-block:: ruby

      require 'Datavyu_API.rb'
      begin
         dump_file = File.expand_path("~/Desktop/relcheck.txt")

         # Compare the "trial" and "rel.trial" columns, using trialnumber as
         #  their matching code and dump the results to a file on the desktop.
         checkReliability("trial", "rel.trial", "trialnum", 5, dump_file)
      end


Video Example of Checking for Reliability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This video displays one way to check for inter-rater reliability for a single column in a spreadsheet.

.. raw:: html

   <video controls width="100%" height="auto">
   <source src="../../_static/video/check-reliability.mp4" type="video/mp4">
   </video>

.. end-content
