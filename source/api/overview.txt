=================
Classes & Methods
=================

.. default-domain:: rb

Ruby, the programming language that the Datavyu API uses, is an object-
oriented language. Object-oriented languages represent concepts, like
Datavyu's columns or cells, for instance, as "objects". Objects have
attributes â€“ values or data that pertains to the object. A cell object's
attributes would be its [codes]; a column object's attributes might be
its cells, its name, etc. Objects are generally "instances of classes".
To put it differently, classes are types of objects, and the objects
that you work with directly in your code are one thing of its class's
type.

Thinking about Datavyu specifically, then, columns would be a class,
while the "trial" column is an instance of that class. This is, in
fact, how the Datavyu API works: the Datavyu API includes two classes to
represent datavyu concepts: :class:`RVariable` describes Datavyu's
:term:`columns <column>`, and :class:`RCell` describes Datavyu's
:term:`cells <cell>`.

Standalone Methods and Class Methods
--------------------------------------

While classes describe objects, :term:`methods <method>` define actions
that you can do. Some methods belong to classes: these :term:`"class
methods" <class method>` act directly upon an instance of a specific
class. Other methods, "standalone methods", perform actions on their
own.

:meth:`getVariable` is a standalone method that you use to retrieve
a column from the Datavyu database so that you can modify it with your
script. To retrieve a column called "trial" from the database, you
would run:

.. code-block:: ruby

   getVariable("trial")

In contrast, :meth:`add_arg`, is a class method of the
:class:`RVariable` class. :meth:`add_arg` *is* invoked on an
:class:`RVariable` instance.  Assuming that you have already retrieved a
column called "trial" from the database, and assigned it to an
:class:`RVariable` instance, the following code adds the *newArgument*
[code] to the "trial" object:

.. code-block:: ruby

   trial.add_arg("newArgument")

Comparing them side-by-side can help highlight the difference:

.. image:: /img/standalone-versus-class-methods.png
   :align: center

Understanding the difference between freestanding and class methods
will make it easier for you to easily use the methods included in the
Datavyu API.

Next Steps
----------

Now that you have a sound grounding in the difference betwene
classes and methods, and know how to invoke both standalone
and class methods, consider our :doc:`/api/introduction-to-scripting`
for tips before diving into the :doc:`/api/tutorials`.
