=================
Classes & Methods
=================

.. default-domain:: rb

Ruby, the programming language that the Datavyu API uses, is an object-
oriented language. Object-oriented languages represent concepts, like
Datavyu's columns or cells, for instance, as "objects". Objects have
attributes â€“ values or data that pertains to the object. A cell object's
attributes would be its [codes]; a column object's attributes might be
its cells, its name, etc. Objects are generally "instances of classes".
To put it differently, classes are types of objects, and the objects
that you work with directly in your code are one thing of its class's
type.

Thinking about Datavyu specifically, then, columns would be a class,
while the "trial" column is an instance of that class. This is, in
fact, how the Datavyu API works: the Datavyu API includes two classes to
represent datavyu concepts: :class:`RVariable` describes Datavyu's
:term:`columns <column>`, and :class:`RCell` describes Datavyu's
:term:`cells <cell>`.

While classes describe objects, :term:`methods <method>` define actions
that you can do. Some methods belong to classes: these :term:`class
methods <class method>` act directly upon an instance of a specific
class. Other methods, "freestanding methods", perform actions on their
own.

An example can help clarify the difference: :meth:`getVariable` is
a freestanding method that you use to retrieve a column from the
Datavyu database so that you can modify it with your script. To retrieve
a column called "trial" from the database, you would run:

.. code-block:: ruby

   getVariable("trial")

To be able to use the column data you retrieve, you would probably want
to assign its output to an :class:`RVariable` object, as in ``trial =
getVariable("trial").`` Regardless, while :meth:`getVariable` outputs to
an :class:`RVariable` object, it is not invoked on an :class:`RVariable`
object.

In contrast, :meth:`add_arg`, which is a class method of the
:class:`RVariable` class *is* invoked on an :class:`RVariable` object.
Assume that you have already retrieved a column called "trial" from the
database, and assigned it to an :class:`RVariable` object:

.. code-block:: ruby

   trial.add_arg("newArgument")

As the example shows, :term:`class methods` are invoked against an
object of their class, in the format ``variableName.methodName()``.

Understanding the difference between freestanding and class methods
will make it easier for you to easily use the methods included in the
Datavyu API.





Methods
-------

Columns
~~~~~~~

:term:`Columns <column>` are the highest level grouping in Datavyu, and the
majority of scripts will involve retrieving columns from the Datavyu
database (using :meth:`getVariable`) and then updating columns
using :meth:`setVariable`. 

You can also create a brand new column using :meth:`createVariable`.

Primarily used as a step in a larger task, :meth:`make_new_cell` creates
a new blank cell at the end of the current column's cell array. Unlike
:meth:`getVariable` or :meth:`setVariable`, which are :term:`standalone
methods <standalone method>`, :meth:`make_new_cell` is a method of the
:class:`RVariable` class, and as such you must invoke it on a
:class:`RVariable` objects.

The :meth:`add_arg` method enables users to add a [code] to a
variable. Like :meth:`make_new_cell` :meth:`add_arg` and
must be invoked on a :class:`RVariable` variable.

Cells
~~~~~

:meth:`change_arg` operates directly at the cell level, and enables
you to change the value of a cell's [code]. :meth:`change_arg` is a
method of the :class:`RCell` class and must be invoked on a
:class:`RClass` variable.

Verification
~~~~~~~~~~~~

Verification methods are a special category. These methods may touch
more than one Datavyu component as they perform tasks that support
verifying coders' work or facilitating two~pass verification.

:meth:`checkValidCodes` tests each coded value within a column
against a list of valid possibilities. You could use this to check
for typographic errors, such as a 'j' when only a 'k' is a valid entry.

Similarly, :meth:`makeReliability` and :meth:`checkReliability`
support using two~pass verification to ensure that coders are recording
accurate observations. :meth:`makeReliability` creates a new column
from an existing coded column so that a second coder can code the same
data source. Using :meth:`checkReliability`, you can then compare the
original and "reliability" columns to see that the two coders recorded
the same phenomena.
