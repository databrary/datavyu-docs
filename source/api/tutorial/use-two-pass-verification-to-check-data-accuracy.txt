.. _api-reliability:

==================================================
Use Two-Pass Verification to Improve Data Accuracy
==================================================

.. default-domain:: rb

.. begin-content

With two-pass verification, two coders separately code the same data
source. This enables coders and researchers to verify that coders 
interpret eents in the same way, and to ensure the accuracy of the
recorded observations. 

To facilitate two-pass verification, you can create a :term:`reliability
column`, which the second coder will use to record their observations,
and then compare the reliability column against the original coder's
observations.

Make a Reliability Variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In general, when creating reliability variables, you create
blank cells that correspond to the cells created during the first coding
pass. This ensures that the two coders will have observed the same
events in the data stream, and allows you to compare the two coding
passes.

The Datavyu Ruby API provides the :meth:`makeReliability` method
for creating reliability variables. :meth:`makeReliability` has four
parameters:

.. include:: /api/reference/makeReliability.txt
   :start-after: table-start
   :end-before: table-end

.. tip:: 

   Copying the :term:`onset` of the
   original column to the new reliability column in the ``args_to_keep`` 
   parameter makes it easier for the second coder to navigate to
   the correct locations in the data source, and to code the same
   events as the original coder. 
   
   When making a reliability column, you should also think about how you
   are going to compare the columns. :meth:`checkReliability`, which
   you use to check reliability, requires that each pair of cells have a
   unique identifier that it can use to link them together. For example,
   a trial number coded into each cell would match corresponding cells,
   even if only a subset of cells was included in the reliability
   variable.

   In order to avoid issues, you should endeavor to import an
   appropriate [code] when you create your reliability column with
   :meth:`makeReliability`.

The following example uses the :download:`example data
</resources/Example-Template.opf>` sample data to create a new
reliability column called "rel.trial" from its "trial" column, skipping
every other cell, and copying over the "onset" and "trialnum" [codes]
so that the reliability coder will not have to recode :term:`onset` and
trial numbers.

.. code-block:: ruby

   require 'Datavyu_API.rb'
   begin
      makeReliability("rel.trial", "trial", 2, "onset", "trialnum")
   end

.. .. figure:: /img/makeReliability-definition-vs-use.png
      
.. .. [Caption describing mapping of function definition to its use]

.. note::

   You do **not** have to write the variable back to the database.
   :meth:`makeReliability` automatically writes its results to 
   the database. This is the only method in the Datavyu Ruby API that
   automatically writes back to the database.

Check Reliability
~~~~~~~~~~~~~~~~~

Once the second coder has recorded their observations in the reliability
column, you can use :meth:`checkReliability` to compare the primary
and reliability columns cells. :meth:`checkReliability`
returns the number of errors, and the percent agreement.

:meth:`checkReliability()` has four required parameters, and one
optional one:

.. include:: /api/reference/checkReliability.txt
   :start-after: table-start
   :end-before: table-end

.. note:: 

   ``match_arg`` is particularly important: for
   :meth:`checkReliability` to know which cells to compare, it needs
   to have some parameter that is unique to each pair of corresponding
   primary and reliability cells. 

.. code-block:: ruby

    require 'Datavyu_API.rb'
    begin
        # Compare the "trial" and "rel.trial" columns, using trialnumber as their matching code
        # and dump the results to a file on the desktop.

        dump_file = File.expand_path("~/Desktop/relcheck.txt")
        checkReliability("trial", "rel.trial", "trialnum", dump_file)
    end

.. end-content

