.. _api-export-data:

.. Allison: headings are not the usual level because of include
   for master tutorial - they should remain coded in this fashion

=======================================
Use Scripts to Export Data from Datavyu
=======================================

.. default-domain:: rb

.. begin-content

Automatic Export Methods
~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO: include the instructions and/or explain that it will be
   forthcoming. if not upcoming:
   - remove heading
   - add paragraph explaining that currently only manual export methods
     but that automatic are under development

Manual Export Methods
~~~~~~~~~~~~~~~~~~~~~

Datavyu supports numerous data export methods. This section covers four
common approaches, in order of increasing complexity:

#. A straight dump to CSV file where cells correspond to the coded cells
   in Datavyu.

#. A straight *frame-by-frame* dump detailing all observations 
   associated with each frame.

#. A *nested* dump, which loops through each column and nests cells
   appropriately, 

#. A *nested dump with un-nested cells*, which is similar to the
   nested dump, but which also works if your cells do not nest.

Method 1: Direct Dump to CSV
````````````````````````````

This method is actually much easier to do (only 1 line!) with Datavyu's
R scripting functions. 

To create a direct dump to CSV using R, 

.. code-block:: R

   [codes here]

The following steps will create the same outcome using Ruby:

[instructions]

.. TODO: actually include the instructions

Method 2: Frame by Frame Dump
`````````````````````````````

We can also dump a file frame by frame if we know the :term:`frame rate`
of the coded video. This creates a new spreadsheet row for each frame of
the data source, with the value of [code] in its own column. For long
videos, this type of export may be too lengthy to be feasible: a 2 hour
video at 30fps is 216,000 rows. However, for short videos this is an
easy and intuitive export method.

To do this, we loop over all of the columns in the spreadsheet and grab
the current cell at each time, moving one frame at a time (so there will
be an entry for 00:00:033, 00:00:066, and so on, all the way until the
end of a video for a 30fps video).

.. TODO: actually include the instructions

Method 3: Nested dump
`````````````````````

.. TODO: fill 'er in

Method 4: Nested dump with un-nested cells
``````````````````````````````````````````

.. end-content

.. TODO: fill 'er in

.. following section should be uncommented once it had content

.. Run a Script Across Multiple Files
   --------------------------------------

.. use require
