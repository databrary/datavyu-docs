================
transfer_columns
================

.. default-domain:: rb

Definition
----------

.. method:: transfer_columns(db1, db2, remove, *varnames)

   Transfers columns between databases. If db1 or db2 are set to the
   empty string "", then that database is the current database in $db
   (usually the GUI's database). So if you want to transfer a column
   into the GUI, set db2 to "". If you want to tranfer a column from the
   GUI into a file, set db1 to "". 
   
   .. warning:: 
   
      Setting remove to true will DELETE THE COLUMNS YOU ARE
      TRANSFERRING FROM DB1.
   
   .. table-start
   
   .. list-table::
      :widths: 20, 40, 50
      :header-rows: 1
      
      * - Parameter
        - Type
        - Description
      * - ``db1``
        - [path]   
        - The full path to save the first Datavyu file. Set to "" to use
          the database that's currently open.
      * - ``db2``
        - [path]
        - The full path to save the second Datavyu file. Set to "" to
          use the database that's currently open.
      * - ``remove``
        - Boolean
        - If true, Datavyu will delete the columns from ``db1`` as they
          are copied to ``db2``. False leaves the columns intact.
       * - ``varnames``
         - list of strings
         - List of the names of the columns that you wish to copy from
           ``db1`` to ``db1``. You must specify at least one column
           name. 

   .. table-end
   
   .. admonition:: Returns
   
      Nothing. Saves files in place or modifies the GUI.

   .. admonition:: Example
   
      The following example transfers the column "idchange" from
      test.opf to the GUI and leaves test.opf intact and unmodified.
         
      .. code-block:: ruby
            
         require 'Datavyu_API.rb'
         begin
            transfer_columns("/Users/username/Desktop/test.opf","",false,"idchange")
         end
