===========
RCell Class
===========

.. default-domain:: rb

.. class:: RCell

   The Ruby container for Datavyu cells.

   .. classmethod:: change_code(code, val)

      Changes the value of a code in a cell.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Parameter
           - Type
           - Description
         * - ``arg``
           - String **or** Ruby column from :meth:`getColumn()`
           - Name of the code that you are updating.
         * - ``val``
           - String, Integer, etc.
           - Value to change the code to.

      .. table-end

      .. admonition:: Returns

         None.

      .. admonition:: Example

         The following example sets the "trial" columns's cell at
         position 0's :term:`onset` to 1000ms, and then writes the
         change back to the database using :meth:`setColumn()`.

         .. code-block:: ruby

            require 'Datavyu_API.rb'
            begin
               trial = getColumn("trial")
               trial.cells(0).change_code("onset", 1000)
               setColumn("trial", trial)
            end
      
   .. classmethod:: is_within(outer_cell)

      Determines if a cell is temporally encased by the ``outer_cell``.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Parameter
           - Type
           - Description
         * - ``outer_cell``
           - 
           - The cell that is going to be checked to see if it temporally
             encases the study cell.

      .. table-end

      .. admonition:: Returns

         Boolean

      .. admonition:: Example
   
         Compare the first cell of the "trial" and "id" columns to see
         if the first cell of "trial" is temporally enclosed by the
         first cell of "id". If it is, print out "Yes, it is temporally
         enclosed", otherwise, print "No, it is not temporally enclosed."
      
         .. code-block:: ruby
   
            require 'Datavyu_API.rb'
            begin
               trial = getColumn("trial")
               id = getColumn("id")
               if trial.cells[0].is_within(id.cells[0])
                  puts "Yes, it is temporally enclosed."
               else
                  puts "No, it is not temporally enclosed."
               end
            end
   
   .. classmethod:: contains(inner_cell)

      Determines if a cell temporally encases the ``innter_cell``.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1

         * - Parameter
           - Type
           - Description
         * - ``inner_cell``
           - 
           - The cell that is going to be checked to see if it is
             temporally encased by the study cell.

      .. table-end

      .. admonition:: Returns

         Boolean

      .. admonition:: Example

         Compare the first cell of the "trial" and "id" columns to see if
         the first cell of "trial" is temporally enclosed by the first cell
         of "id". If it is, print out "Yes, it is temporally encloses the cell",
         otherwise, print "No, it is does not temporally enclose the cell."
   
         .. code-block:: ruby

            require 'Datavyu_API.rb'
            begin
               trial = getColumn("trial")
               id = getColumn("id")
               if id.cells[0].is_within(trial.cells[0])
                  puts "Yes, it is temporally encloses the cell."
               else
                  puts "No, it is does not temporally enclose the cell."
               end
            end

   .. classmethod:: print_all(*p)

      Dumps all of the codes in a :term:`cell` to a :term:`string`.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Parameter
           - Type
           - Description
         * - ``p`` **optional**
           - String
           - The separator between codes. Defaults to tab (\t)

      .. table-end

      .. admonition:: Returns

         String of the arguments, starting with ordinal, onset,
         and offset, followed by the codes.

      .. admonition:: Example
   
         [words]
      
         .. code-block:: ruby
   
            trial = getColumn("trial")
            print trial.cells[0].print_all()

         
