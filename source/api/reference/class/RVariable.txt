===============
RVariable Class
===============

.. default-domain:: rb

.. class:: RVariable

   The Ruby container for Datavyu columns.

   .. classmethod:: make_new_cell()
   
      Creates a new blank cell at the end of the column's cell array.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Argument
           - Type
           - Description
         * - None
           - 
           -

      .. table-end

      .. admonition:: Returns

         Reference to the cell that was just created. Modify the cell using 
         this reference.

      .. admonition:: Example

         The following example creates a new cell at the end of the "trial"
         column's cell array, and assigns its reference to the variable
         ``newcell``. It then changes ``newcell``'s :term:`onset` to 1000ms using
         :meth:`change_code()`, and writes the change back to the spreadsheet
         using :meth:`setColumn`.

         .. code-block:: ruby

            trial = getColumn("trial")
            newcell = trial.make_new_cell()
            newcell.change_code("onset", 1000)
            setColumn("trial", trial)

   .. classmethod:: change_code_name(old_name, new_name)
   
      Renames a code.
   
      .. table-start
      
      .. list-table::
         :widths: 20, 40, 50
         :header-rows: 1
         
         * - Argument
           - Type
           - Descripton
         * - ``old_name``
           - String
           - Current name of the code
         * - ``new_name``
           - String
           - New name for the code, which will replace ``old_name``
      
      .. admonition:: Returns
      
         [Nothing ?]
      
      .. admonition:: Example 
      
         The following example renames the "trial" column's
         *badCodeName* code to *awesomeCodeName*, and then writes the
         changes back to the Datavyu spreadsheet:
         
         .. code-block:: ruby
            
            require 'Datavyu_API.rb'
            begin
               trial = getColumn("trial")
               trial.change_code_name("badCodeName", "awesomeCodeName")
               setColumn("trial")
            end
   
   .. classmethod:: add_code(name)

      Adds a code to a column.

      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Argument
           - Type
           - Description
         * - ``name``
           - String
           - The name of the code you are adding to the column

      .. table-end

      .. admonition:: Returns

         [unclear]
      
      .. admonition:: Example 
      
         The following example adds the *unit* code to the "trial"
         column, and then writes the changes back to the spreadsheet
         using :meth:`setColumn()`.

         .. code-block:: ruby
      
            require 'Datavyu_API.rb'
            begin
               trial = getColumn("trial")
               trial.add_code("unit")
               setColumn(trial)
            end

   .. classmethod:: remove_code(name)
   
      Deletes a code from a column.
      
      .. table-start

      .. list-table:: 
         :widths: 20, 40, 50
         :header-rows: 1
   
         * - Argument
           - Type
           - Description
         * - ``name``
           - String
           - The name of the code you wish to delete from the column

      .. table-end

      .. admonition:: Returns
      
         [unclear]

         
